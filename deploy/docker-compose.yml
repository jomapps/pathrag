# PathRAG with ArangoDB - Docker Compose Configuration
# This file provides a complete containerized deployment solution

version: '3.8'

services:
  # ArangoDB Database
  arangodb:
    image: arangodb:3.9.11
    container_name: pathrag_arangodb
    restart: unless-stopped
    environment:
      ARANGO_ROOT_PASSWORD: ${ARANGODB_PASSWORD:-pathrag123}
      ARANGO_NO_AUTH: "false"
    ports:
      - "8529:8529"
    volumes:
      - arangodb_data:/var/lib/arangodb3
      - arangodb_apps:/var/lib/arangodb3-apps
    networks:
      - pathrag_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8529/_api/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PathRAG Application
  pathrag:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
    container_name: pathrag_app
    restart: unless-stopped
    environment:
      # ArangoDB Configuration
      ARANGODB_HOST: arangodb
      ARANGODB_PORT: 8529
      ARANGODB_USERNAME: root
      ARANGODB_PASSWORD: ${ARANGODB_PASSWORD:-pathrag123}
      ARANGODB_DATABASE: ${ARANGODB_DATABASE:-pathrag}
      
      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4o-mini}
      OPENAI_MAX_TOKENS: ${OPENAI_MAX_TOKENS:-4000}
      OPENAI_TEMPERATURE: ${OPENAI_TEMPERATURE:-0.1}
      
      # PathRAG Configuration
      PATHRAG_WORKING_DIR: /app/data
      PATHRAG_NAMESPACE: ${PATHRAG_NAMESPACE:-default}
      PATHRAG_LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # API Configuration
      FLASK_HOST: 0.0.0.0
      FLASK_PORT: 5000
      FLASK_DEBUG: ${FLASK_DEBUG:-false}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: /app/logs/pathrag.log
    ports:
      - "${API_PORT:-5000}:5000"
    volumes:
      - pathrag_data:/app/data
      - pathrag_logs:/app/logs
      - pathrag_backups:/app/backups
    networks:
      - pathrag_network
    depends_on:
      arangodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pathrag_nginx
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-80}:80"
      - "${WEB_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - pathrag_network
    depends_on:
      - pathrag
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: pathrag_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-pathrag123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pathrag_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    profiles:
      - cache

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: pathrag_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pathrag_network
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: pathrag_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - pathrag_network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# Named volumes for persistent data
volumes:
  arangodb_data:
    driver: local
  arangodb_apps:
    driver: local
  pathrag_data:
    driver: local
  pathrag_logs:
    driver: local
  pathrag_backups:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

# Custom network
networks:
  pathrag_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16